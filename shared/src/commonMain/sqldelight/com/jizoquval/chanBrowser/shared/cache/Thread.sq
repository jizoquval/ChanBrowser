CREATE TABLE Thread (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    idOnChan INTEGER NOT NULL,
    boardId INTEGER NOT NULL,
    postMessageLength INTEGER AS Int NOT NULL,
    postsCount INTEGER AS Int NOT NULL,
    filesCount INTEGER AS Int NOT NULL,
    timestamp INTEGER NOT NULL,
    isEndless INTEGER AS Boolean NOT NULL DEFAULT 0,
    isArchive INTEGER AS Boolean NOT NULL DEFAULT 0,
    isClosed  INTEGER AS Boolean NOT NULL DEFAULT 0,
    FOREIGN KEY(boardId) REFERENCES Board(id)
        ON DELETE CASCADE,
     UNIQUE (idOnChan, boardId)
);

CREATE VIEW threadPost
AS SELECT Thread.id, Thread.idOnChan, Thread.boardId, Thread.postsCount, Thread.filesCount, Post.title,
Post.message, Attachment.smallAttachmentPath
FROM Thread
INNER JOIN Post ON Post.threadId = Thread.id
INNER JOIN Attachment ON Attachment.postId = Post.id
WHERE Post.idOnChan = Thread.idOnChan
GROUP BY Thread.id;

updateOrInsert {
    UPDATE Thread
    SET postMessageLength = :maxPostLength, postsCount = :postsCount, filesCount = :filesCount,
    timestamp = :timestamp, isEndless = :isEndless, isArchive = :isArchive, isClosed = :isClosed
    WHERE boardId = :boardId AND idOnChan = :idOnChan;

    INSERT OR IGNORE INTO Thread(
     idOnChan, boardId, postMessageLength, postsCount, filesCount, timestamp, isEndless,
     isArchive, isClosed
    )
    VALUES(:idOnChan, :boardId, :maxPostLength, :postsCount, :filesCount, :timestamp, :isEndless,
        :isArchive, :isClosed
    );
}


selectThreadsForBoard:
SELECT * FROM Thread WHERE boardId = ? LIMIT :offset, :rowCount;

selectAllThreadsForBoard:
SELECT * FROM threadPost WHERE threadPost.boardId = ?;

selectThreadId:
SELECT id FROM Thread WHERE boardId = ? AND idOnChan = ?;

selectBoardName:
SELECT idOnChan FROM Board WHERE id = ?;